version: 2.1
orbs:
  docker: circleci/docker@1.5.0
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.4.0

parameters:
  cluster-name:
    type: string
    default: "capstone-cluster"
jobs:
  build-app:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: verify the system
          command: |
            ls -Rla ~/
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run code lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
# Lint Docker
  lint-docker:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name : install hado Lint 
          command: | 
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name : Hadolint 
          command: | 
            hadolint Dockerfile 

  build-container:
    docker:
      - image: circleci/golang:1.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS  # context / project UI env-var reference
    steps:
      - checkout
      # ... steps for building/testing app ...

      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false

      # build and push Docker image
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          docker build --tag mbscale/capstoneapp-green-$CIRCLE_WORKFLOW_ID .
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker tag mbscale/capstoneapp-green-$CIRCLE_WORKFLOW_ID:latest $DOCKER_USER/capstone-app-green-$CIRCLE_WORKFLOW_ID:latest
          docker push $DOCKER_USER/capstone-app-green-$CIRCLE_WORKFLOW_ID:latest
          
  create-eks-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: << pipeline.parameters.cluster-name >>
          aws-region: us-west-2
          nodegroup-name: linux-nodes
          node-type: t2.medium
          nodes: 1

  create-or-update-eks-deployment:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: blue-controller.json
   #       resource-name: deployment/blue
      - kubernetes/create-or-update-resource:
           get-rollout-status: false
           resource-file-path: green-controller.json
   #        resource-name: deployment/green
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: blue-green-service.json
   #       resource-name: deployment/service
      - run:
          name: Check the Resources
          command: |
            kubectl get services
            kubectl get pods
            kubectl get deploy,po -o wide
            kubectl get nodes -o wide

  get-resources:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - run:
          name: Check the Resources
          command: |
            kubectl get services
            kubectl get pods
            kubectl get deploy,po -o wide
            kubectl get nodes -o wide
            kubectl describe service mukullb
  
  create-or-update-eks-deployment-to-green:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: blue-green-service.json
          resource-name: deployment/servicegreen
      - run:
          name: Check the Resources
          command: |
            kubectl get services
            kubectl get deploy,po -o wide
            kubectl get nodes -o wide
   
workflows:
  default:
     jobs:
      # - build-app
       #- lint-docker:
        #   requires: [build-app]
       #- build-container:
       #    requires: [lint-docker]
       - create-eks-cluster:
           requires: [build-container]
       - create-or-update-eks-deployment:
           requires: [create-eks-cluster]
       - get-resources:
           requires: [create-or-update-eks-deployment]
       - create-or-update-eks-deployment-to-green:
           requires: [create-or-update-eks-deployment]
       #- aws-eks/delete-cluster
       
           
